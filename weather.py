# -*- coding: utf-8 -*-
"""Weather.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/137mScIWZ_abzXodJcQvwYP_biw1qeSFP
"""

# Dependencies and Setup
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import requests

# Import API key
api_key = 'f328711f5c59fc6ee99efcd16f8acc73'

# Incorporated citipy to determine city based on latitude and longitude
!pip install citipy
from citipy import citipy
# Output File (CSV)
output_data_file = "output_data/cities.csv"

# Range of latitudes and longitudes
lat_range = (-90, 90)
lng_range = (-180, 180)

# List for holding lat_lngs and cities
lat_lngs = []
cities = []

# Create a set of random lat and lng combinations
lats = np.random.uniform(low=-90.000, high=90.000, size=1500)
lngs = np.random.uniform(low=-180.000, high=180.000, size=1500)

#to get a combined set
lat_lngs = zip(lats, lngs)

# Identify nearest city for each lat, lng combination
for lat_lng in lat_lngs:
    city = citipy.nearest_city(lat_lng[0], lat_lng[1]).city_name
    
    # If the city is unique, then add it to a our cities list
    if city not in cities:
        cities.append(city)

# Print the city count to confirm sufficient count
len(cities)

#base url
url = "http://api.openweathermap.org/data/2.5/weather?units=Imperial&APPID=" + api_key 

#empty lists to hold extracted info
country = []
new_cities = []
cloudiness = []
temp = []
date = []
humidity = []
lng =[]
lat = []
wind = []

#establish counters of records and sets to get desired formats
counter_record = 0
counter_set = 0

#to get desired print format
print('------------------------')
print('Beginning Data Retrieval')
print('------------------------')

url = "http://api.openweathermap.org/data/2.5/weather?units=Imperial&APPID=" + api_key 

#iterate through all cities
for city in cities:
    query_url = url + "&q=" + city
    # Get weather data
    response = requests.get(query_url).json()
    if counter_record < 50:
      counter_record += 1
    else:
        counter_set += 1
        counter_record = 0

    print('Processing record {} of set {} | {}'.format(counter_record, counter_set, city))
    print(url)
    try:
        cloudiness.append(response['clouds']['all'])
        country.append(response['sys']['country'])
        date.append(response['dt'])
        humidity.append(response['main']['humidity'])
        temp.append(response['main']['temp_max'])
        lat.append(response['coord']['lat'])
        lng.append(response['coord']['lon'])
        wind.append(response['wind']['speed'])
        new_cities.append(city)
    except:
        print("City not found!")
        pass

print('-------------------------')
print('Data Retrieval Complete')
print('-------------------------')

#create a df with all the relevant data
dict = {
    "City": new_cities,
    "Cloudiness" : cloudiness,
    "Country" : country,
    "Date" : date,
    "Humidity" : humidity,
    "Temp": temp,
    "Lat" : lat,
    "Lng" : lng,   
    "Wind Speed" : wind
}
weather_data = pd.DataFrame(dict)
weather_data.count()
weather_data.head()

#create output of cities
cities_list = zip(new_cities,cloudiness,country,date,humidity,temp,lat,lng)
# Set variable for output file
output_file = os.path.join('..', 'output_data', 'cities.csv')
#  Open the output file
with open(output_file, 'w') as datafile:
    weather_data.to_csv(output_file)

#plotting latitude vs temperature plot
weather_data.plot(kind='scatter', x='Lat', y='Temp', c='Blue')
plt.title('City Latitude Vs Max Temperature ({})')
plt.xlabel('Latitude')
plt.ylabel('Max temperature (F)')
plt.grid()

#plotting latitude vs humidity
weather_data.plot(kind='scatter',x='Lat',y='Humidity', c='Blue')
plt.title('City Latitude Vs Max Humidity ({})')
plt.xlabel('Latitude')
plt.ylabel('Humidity (%)')
plt.grid()

#plotting latitude vs cloudiness
weather_data.plot(kind='scatter',x='Lat',y='Cloudiness', c='DarkBlue')
plt.title('City Latitude Vs Cloudiness ({})')
plt.xlabel('Latitude')
plt.ylabel('Cloudiness (%)')
plt.grid()

#plotting latitude vs wind speed
weather_data.plot(kind='scatter',x='Lat',y='Wind Speed', c='DarkBlue')
plt.title('City Latitude Vs Wind Speed ({})')
plt.xlabel('Latitude')
plt.ylabel('Wind Speed (mph)')
plt.grid()

#Analysis
# 1) As expected, temperature is  warmer in the Southern Hemisphere than the Northern Hemisphere and warmest points are nearest to the equator.
#    Temperature increases with increase with decrease in latitude, which shows that the warmest points as nearest to the centre.

# 2. Humidity of majority of cities stays above 60%.

# 3. Latitude did not have a clear impact on wind speed, with no major observable trend.